/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.studentmanagementsystem;
import com.studentmanagementsystem.Interfaces.IStudentManager;
import javax.swing.*;
import java.util.*;
import javax.swing.table.*;
/**
 *
 * @author Admin
 */
public class MainWindow extends javax.swing.JPanel {
    IStudentManager studentManager;
    TimSort_ timSort;
    private javax.swing.JFrame mainFrame;
    /**
     * Creates new form MainWindow
     */
    public MainWindow(IStudentManager studentManager, javax.swing.JFrame frame_) {
        this.studentManager = studentManager;
        this.mainFrame = frame_;
        
        if(!this.studentManager.isloggedIn())
        {
            // Create a new JFrame to hold the Login window
            javax.swing.JFrame loginFrame = new javax.swing.JFrame("Login");
            loginFrame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);  // Dispose the frame when closed
            // Create an instance of the Login window
            Login loginWindow = new Login(this.studentManager, loginFrame);
            loginFrame.getContentPane().add(loginWindow);  // Add the Login window to the frame
            loginFrame.pack();  // Pack the components
            loginFrame.setLocationRelativeTo(null);  // Center the frame on the screen
            loginFrame.setVisible(true);  // Make the frame visible 
            this.mainFrame.dispose();
        }
        else {
            initComponents();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStudentData = new javax.swing.JTable();
        jButtonAddStudent = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jLabelSort = new javax.swing.JLabel();
        jButtonSortPosition = new javax.swing.JButton();
        jLabelTitle = new javax.swing.JLabel();
        jTextFieldSearchById = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jButtonSortById = new javax.swing.JButton();
        jButtonSortByFirstName = new javax.swing.JButton();
        jButtonSortDateOfBirth = new javax.swing.JButton();
        jButtonAddRandomData = new javax.swing.JButton();
        jTextFieldRandomInteger = new javax.swing.JTextField();

        jTableStudentData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Department", "Date Of Birth", "Math", "Languages", "Total", "Position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableStudentData.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTableStudentData);
        jTableStudentData.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jButtonAddStudent.setText("Add Student");
        jButtonAddStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddStudentActionPerformed(evt);
            }
        });

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jLabelSort.setText("Sort By");

        jButtonSortPosition.setText("Position");
        jButtonSortPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortPositionActionPerformed(evt);
            }
        });

        jLabelTitle.setText("User Management System");

        jTextFieldSearchById.setText("Search by ID");

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonSortById.setText("ID");
        jButtonSortById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortByIdActionPerformed(evt);
            }
        });

        jButtonSortByFirstName.setText("First Name");
        jButtonSortByFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortByFirstNameActionPerformed(evt);
            }
        });

        jButtonSortDateOfBirth.setText("Date Of Birth");
        jButtonSortDateOfBirth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortDateOfBirthActionPerformed(evt);
            }
        });

        jButtonAddRandomData.setText("Add Random Data");
        jButtonAddRandomData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRandomDataActionPerformed(evt);
            }
        });

        jTextFieldRandomInteger.setText("10");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jButtonAddRandomData)
                .addGap(64, 64, 64)
                .addComponent(jTextFieldRandomInteger, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(193, 193, 193)
                .addComponent(jTextFieldSearchById, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSearch)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 834, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonAddStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSortPosition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSortById, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonSortDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 5, Short.MAX_VALUE))
                                    .addComponent(jButtonSortByFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabelSort)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTitle)
                .addGap(359, 359, 359))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jButtonAddStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonRefresh)
                .addGap(29, 29, 29)
                .addComponent(jLabelSort)
                .addGap(18, 18, 18)
                .addComponent(jButtonSortPosition)
                .addGap(18, 18, 18)
                .addComponent(jButtonSortById)
                .addGap(18, 18, 18)
                .addComponent(jButtonSortByFirstName)
                .addGap(29, 29, 29)
                .addComponent(jButtonSortDateOfBirth)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearchById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch)
                    .addComponent(jButtonAddRandomData)
                    .addComponent(jTextFieldRandomInteger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        this.updateTable();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void updateTable(){
        try {
            // Get all students from the student manager
            Map<String, Student> allStudents = studentManager.getAllStudents();

            // Clear the existing table data
            DefaultTableModel model = (DefaultTableModel) jTableStudentData.getModel();
            model.setRowCount(0);

            // Add each student to the table
            for (Student student : allStudents.values()) {
                model.addRow(new Object[] {
                    student.getId(),
                    student.getFirstName(),
                    student.getLastName(),
                    student.getDepartment(),
                    student.getDateOfBirth().toString(),
                    student.getGrades().get("Math"), // Assuming "Math" is the key for math score
                    student.getGrades().get("Languages"), // Assuming "Languages" is the key for languages score
                    student.getTotal(),
                    null
                });
            }
            jTableStudentData.setModel(model);
        } catch (Exception e) {
            // Handle any exceptions (e.g., display an error message)
            javax.swing.JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void updateTable(Student []allStudents, Boolean positionB){
        try {
           
            // Clear the existing table data
            DefaultTableModel model = (DefaultTableModel) jTableStudentData.getModel();
            model.setRowCount(0);
            
            int position = allStudents.length-1;      
            // Add each student to the table
            for (int i = 0; i < allStudents.length; i++) {
                model.addRow(new Object[] {
                    allStudents[position].getId(),
                    allStudents[position].getFirstName(),
                    allStudents[position].getLastName(),
                    allStudents[position].getDepartment(),
                    allStudents[position].getDateOfBirth().toString(),
                    allStudents[position].getGrades().get("Math"), // Assuming "Math" is the key for math score
                    allStudents[position].getGrades().get("Languages"), // Assuming "Languages" is the key for languages score
                    allStudents[position].getTotal(),
                    ((positionB)? (i+1) : null)
                });
                position--;
            }
            jTableStudentData.setModel(model);
        } catch (Exception e) {
            // Handle any exceptions (e.g., display an error message)
            javax.swing.JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private Student [] studentsFromMap(Map<String, Student> allStudents){
        // Determine the size of the array
        int size = allStudents.size();
        Student[] studentsArray = new Student[size];
        
        // Iterate through the map and copy values to the array
        int index = 0;
        for (Student student : allStudents.values()) {
            studentsArray[index++] = student;
        }
        
        return studentsArray;
    }
    
    private void jButtonAddStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddStudentActionPerformed
        // TODO add your handling code here:
        
       
        // Create an instance of AddStudent window
        AddStudent addStudentWindow = new AddStudent(studentManager);

        // Create a JFrame to hold the AddStudent window
        javax.swing.JFrame frame = new javax.swing.JFrame("Add Student");
        frame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE); // Dispose the frame when closed
        frame.getContentPane().add(addStudentWindow); // Add the AddStudent window to the frame
        frame.pack(); // Pack the components
        frame.setLocationRelativeTo(null); // Center the frame on the screen
        frame.setVisible(true); // Make the frame visible
    }//GEN-LAST:event_jButtonAddStudentActionPerformed

    private void jButtonSortPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortPositionActionPerformed
        // TODO add your handling code here:
        if(studentsFromMap(studentManager.getAllStudents()).length >= 0){
            Student []studs = studentsFromMap(studentManager.getAllStudents());
            Comparator<Student> mathGradesComparator = Comparator.comparing(Student::getTotal);
            timSort = new TimSort_<>(studs, mathGradesComparator);
            timSort.sort();
            updateTable(studs,true);
        }
    }//GEN-LAST:event_jButtonSortPositionActionPerformed

    private void jButtonSortByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortByIdActionPerformed
        // TODO add your handling code here:
        if(studentsFromMap(studentManager.getAllStudents()).length >= 0){
            Student []studs = studentsFromMap(studentManager.getAllStudents());
            Comparator<Student> comparator = Comparator.comparing(Student::getId);
            timSort = new TimSort_<>(studs, comparator);
            timSort.sort();
            updateTable(studs,false);
        }
    }//GEN-LAST:event_jButtonSortByIdActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        String UId = jTextFieldSearchById.getText();
        if(studentManager.getAllStudents().size() > 0){
        
            Student []students = studentsFromMap(studentManager.getAllStudents());
            students = searchByUsername(students, UId);
            updateTable(students, false);
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonSortByFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortByFirstNameActionPerformed
        // TODO add your handling code here:
        if(studentsFromMap(studentManager.getAllStudents()).length >= 0){
            Student []studs = studentsFromMap(studentManager.getAllStudents());
            Comparator<Student> comparator = Comparator.comparing(Student::getFirstName);
            timSort = new TimSort_<>(studs, comparator);
            timSort.sort();
            updateTable(studs,false);
        }
    }//GEN-LAST:event_jButtonSortByFirstNameActionPerformed

    private void jButtonSortDateOfBirthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSortDateOfBirthActionPerformed
        // TODO add your handling code here:
        if(studentsFromMap(studentManager.getAllStudents()).length >= 0){
            Student []studs = studentsFromMap(studentManager.getAllStudents());
            Comparator<Student> comparator = Comparator.comparing(Student::getDateOfBirth);
            timSort = new TimSort_<>(studs, comparator);
            timSort.sort();
            updateTable(studs,false);
        }
    }//GEN-LAST:event_jButtonSortDateOfBirthActionPerformed

    private void jButtonAddRandomDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRandomDataActionPerformed
        // TODO add your handling code here:
        try{
            int random = Integer.parseInt(jTextFieldRandomInteger.getText());
            //studentManager = new StudentManager(new FileHandler());
            RandomGenerator.generateRandomStudents(studentManager, random); // Generate and add 10 random students
            studentManager.viewAllStudents(); // View all generated students
        }
        catch(Exception e){
            javax.swing.JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAddRandomDataActionPerformed
    public Student[] searchByUsername(Student[] students, String username) {
        // Sort the array of students based on usernames
       timSort = new TimSort_<>(students, Comparator.comparing(Student::getId));

        // Perform binary search to find the target username
        BinarySearch_<Student> binarySearch = new BinarySearch_<>();
        Comparator<Student> comparator = Comparator.comparing(Student::getId);
        int index = binarySearch.search(students, new Student(username, null, null, null, null, null),comparator);

        // If the username is found, return an array containing the matching student
        if (index >= 0) {
            return new Student[]{students[index]};
        } else {
            // If the username is not found, return an empty array
            return new Student[0];
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddRandomData;
    private javax.swing.JButton jButtonAddStudent;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSortByFirstName;
    private javax.swing.JButton jButtonSortById;
    private javax.swing.JButton jButtonSortDateOfBirth;
    private javax.swing.JButton jButtonSortPosition;
    private javax.swing.JLabel jLabelSort;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableStudentData;
    private javax.swing.JTextField jTextFieldRandomInteger;
    private javax.swing.JTextField jTextFieldSearchById;
    // End of variables declaration//GEN-END:variables
}
